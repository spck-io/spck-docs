{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Spck Code Editor Spck (pronouced as \"spec\") Editor enables you to work on JavaScript projects whenever, wherever. If its a new single-page app, a game, data visualizations, 3D simulations, or anything else that can be realized using the magic of JavaScript, HTML, and CSS, Spck Editor hopes to be the code editor of your choice. Android App Spck Editor is currently available on the Play Store for Android 5.0+ and on the App Store for iOS 10.3+ . Features Overview Hints Code hints are an essential aid to mastering external libraries. They also offer a convenience in your own code, and provide incentives to better document code with JSDoc comment strings. Autocompletion Make less typos with the awesome code completion provided by the editor. Code completions are handled by the awesome TypeScript libraries provided by VS Code. Themes The editor supports a variety of themes including XCode, Chrome, Dracula, Monokai, Ayu Mirage, and Ayu Light. Markdown If you ever need to preview a Markdown file, you can do so right in the editor. Built upon the awesome Markdown-it library. Github Export your changes right to your Github repo. If you need to make live edits to Github, you can do so right in the editor. The editor provides basic Github integration including code diffs, highlighted files with changes, pulling and committing. Be sure to give it a try. Also please checkout our Github repos on more info on embedding Spck Editor in your own site as well as libraries that Spck Editor is built upon. Diffs File diffing is an awesome feature that any great code editor with git integration needs. More features will be added to the code differ in the near future, for example, char-by-char diffs as well as in-place diff editting. Import & Export Zip An alternative to Github commits is exporting your project as a zip file. You can transfer your project to another device by the reverse operation of importing. Note that the exported file may have Unix-style newlines (meaning a single \"\\n\" character instead of \"\\r\\n\", however, any proper code editor should handle this automatically in Windows. Search Project-wide code searching is a useful tool for any JavaScript development. Navigating between files by keywords and refactoring are all made easier with an awesome fast search feature. There's still room to improve with the editor's search, so we need your feedback on any ideas to improve the editor! Live Preview Live previewing is a feature so essential, its barely worth mentioning. However... Spck Editor supports two modes of previewing, in a separate browser tab as well as an inline iframe for quicker edits-to-preview. Additionally, previewing also work great in Spck Editor's mobile app. So if your interested in giving JavaScript development a try on your mobile device, be sure to download our mobile app . window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3'); table { width:100%; }","title":"Home"},{"location":"#spck-code-editor","text":"Spck (pronouced as \"spec\") Editor enables you to work on JavaScript projects whenever, wherever. If its a new single-page app, a game, data visualizations, 3D simulations, or anything else that can be realized using the magic of JavaScript, HTML, and CSS, Spck Editor hopes to be the code editor of your choice.","title":"Spck Code Editor"},{"location":"#android-app","text":"Spck Editor is currently available on the Play Store for Android 5.0+ and on the App Store for iOS 10.3+ .","title":"Android App"},{"location":"#features-overview","text":"","title":"Features Overview"},{"location":"#hints","text":"Code hints are an essential aid to mastering external libraries. They also offer a convenience in your own code, and provide incentives to better document code with JSDoc comment strings.","title":"Hints"},{"location":"#autocompletion","text":"Make less typos with the awesome code completion provided by the editor. Code completions are handled by the awesome TypeScript libraries provided by VS Code.","title":"Autocompletion"},{"location":"#themes","text":"The editor supports a variety of themes including XCode, Chrome, Dracula, Monokai, Ayu Mirage, and Ayu Light.","title":"Themes"},{"location":"#markdown","text":"If you ever need to preview a Markdown file, you can do so right in the editor. Built upon the awesome Markdown-it library.","title":"Markdown"},{"location":"#github","text":"Export your changes right to your Github repo. If you need to make live edits to Github, you can do so right in the editor. The editor provides basic Github integration including code diffs, highlighted files with changes, pulling and committing. Be sure to give it a try. Also please checkout our Github repos on more info on embedding Spck Editor in your own site as well as libraries that Spck Editor is built upon.","title":"Github"},{"location":"#diffs","text":"File diffing is an awesome feature that any great code editor with git integration needs. More features will be added to the code differ in the near future, for example, char-by-char diffs as well as in-place diff editting.","title":"Diffs"},{"location":"#import-export-zip","text":"An alternative to Github commits is exporting your project as a zip file. You can transfer your project to another device by the reverse operation of importing. Note that the exported file may have Unix-style newlines (meaning a single \"\\n\" character instead of \"\\r\\n\", however, any proper code editor should handle this automatically in Windows.","title":"Import &amp; Export Zip"},{"location":"#search","text":"Project-wide code searching is a useful tool for any JavaScript development. Navigating between files by keywords and refactoring are all made easier with an awesome fast search feature. There's still room to improve with the editor's search, so we need your feedback on any ideas to improve the editor!","title":"Search"},{"location":"#live-preview","text":"Live previewing is a feature so essential, its barely worth mentioning. However... Spck Editor supports two modes of previewing, in a separate browser tab as well as an inline iframe for quicker edits-to-preview. Additionally, previewing also work great in Spck Editor's mobile app. So if your interested in giving JavaScript development a try on your mobile device, be sure to download our mobile app . window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3'); table { width:100%; }","title":"Live Preview"},{"location":"create-app-token/","text":"Creating an App Token An app token is required for accessing GIT repositories for different providers. You can change the credentials used for GIT under the settings page. You can set different GIT credentials for each GIT provider (i.e. Github, Gitlab, Bitbucket, Other) Note that an app token password is not required for some providers and you may use your username and password to login directly. Additionally, if you have enabled 2-factor Authentication, you MUST use an app token and not your password. Spck Editor does not collect any login or credential information, but to improve your privacy and for your peace of mind, it is recommended to use an app password so your actual password is not exposed. The process of creating an app token is different for each provider. Create a Github app token Github To create an app token for Github, go to this link https://github.com/settings/tokens . You need to be logged in to see this page. Click on \"Generate new token\" to start. You may be required to enter your password. Type a name for the token. Select scopes. It is recommended to select all permissions for \"repo\". No other permissions is necessary to read and write to repos. Click \"Generate Token\". Copy and paste this token into Spck Editor credentials modal. Make sure the provider is correctly set or the credentials will not be used correctly. (Github) Note 2-Factor Authenciation If you have enabled 2-factor Auth, then you MUST use an app token. Pushing to repositories with basic password is not allowed if 2-Factor Auth is enabled. table { width:100%; }","title":"Creating an App Token"},{"location":"create-app-token/#creating-an-app-token","text":"An app token is required for accessing GIT repositories for different providers. You can change the credentials used for GIT under the settings page. You can set different GIT credentials for each GIT provider (i.e. Github, Gitlab, Bitbucket, Other) Note that an app token password is not required for some providers and you may use your username and password to login directly. Additionally, if you have enabled 2-factor Authentication, you MUST use an app token and not your password. Spck Editor does not collect any login or credential information, but to improve your privacy and for your peace of mind, it is recommended to use an app password so your actual password is not exposed. The process of creating an app token is different for each provider. Create a Github app token","title":"Creating an App Token"},{"location":"create-app-token/#github","text":"To create an app token for Github, go to this link https://github.com/settings/tokens . You need to be logged in to see this page. Click on \"Generate new token\" to start. You may be required to enter your password. Type a name for the token. Select scopes. It is recommended to select all permissions for \"repo\". No other permissions is necessary to read and write to repos. Click \"Generate Token\". Copy and paste this token into Spck Editor credentials modal. Make sure the provider is correctly set or the credentials will not be used correctly. (Github)","title":"Github"},{"location":"create-app-token/#note-2-factor-authenciation","text":"If you have enabled 2-factor Auth, then you MUST use an app token. Pushing to repositories with basic password is not allowed if 2-Factor Auth is enabled. table { width:100%; }","title":"Note 2-Factor Authenciation"},{"location":"editor-settings/","text":"Editor Settings The editor settings tab can be used to change various settings of Spck Editor. Searching Settings GIT Appearance Animation Language Theme AMOLED Display Editor Autocomplete/Check Syntax Cursor Style Font Size Font Indent Guide Line Numbers Show Invisibles Indent Guide Use Soft Tabs Word Wrap Preview Live Preview Touch Tablet Mode Haptic Keypress Keyboard Position Extra Keyboard Touch Keyboard About Build Keyboard Shortcuts Log History Searching Settings To search for a setting by name, click on the \ud83d\udd0d Search Icon and type in the setting name. The following section lists out specific settings and their intended behavior. Back to Top GIT Credentials : Opens up the GIT Credential modal to change credentials used for different GIT providers (i.e. Github, Gitlab, Bitbucket, Other) This is an example of using a Github app token to connect to your Github repositories. Cloning or pulling public repositories will not require an app token. If an invalid app token is set, you will receive \"Invalid credentials\" error message or \"Authentication Error\" regardless if the repository is public or private. Make sure you grant the token proper access writes, and allow additional settings to push to the Github/Gitlab/Bitbucket branch. (For example, the master branch may be locked and prevent pushing which will also result in an error.) To properly create an access token, please see Creating an Access Token for Spck Editor. Back to Top APPEARANCE Animation Disables all animations in the editor. For example, opening the menu, or modal animations. This is for phones or devices that experience lag with CSS animations and offers a better experience for older devices. Back to Top Language Use this to change the editor language to a different supported language. Currently supported languages include: English (Recommended) Spanish French Portuguese Russian Indonesian Japanese Chinese Back to Top Theme Changes the colors of the code editor. Dark and light editor theme are tied with this setting. Light Themes: Ayu Light Chrome XCode Dark themes: Ayu Mirage Dracula Monokai One Dark Back to Top AMOLED Display Use this setting for AMOLED screens to save battery life. Changes all editor blacks to use `#000`. This does not affect menus as a degree of contrast is needed for menus and dialogs/modals and they are not expected to be on screen for a long time. Back to Top EDITOR Autocomplete/Check Syntax Enables advance autocomplete and syntax checking when available for supported languages. Disabling this can help improve performance as autocompletion feature is memory heavy and may have bad performance on older devices. If you are experiencing frequent crashes, it may be due to a memory issue with your phone and it is recommended to try disabling this setting to improve memory usage. Advance Autocompletion Support: JavaScript TypeScript HTML CSS SCSS LESS Basic Autocompletion: Python Java C Ruby Perl Scala More... Back to Top Cursor Style Change the cursor style of the editor. Can choose from \"No Blink\" or \"Slim\" cursor. Back to Top Font Size Changes the font size of the code editor. Back to Top Font Changes the font used in the editor. Fonts are downloaded on-demand and can be deleted if they are no longer required. Back to Top Indent Guide Changes the visual setting of showing indent guidelines in the editor. Back to Top Line Numbers Toggles the line numbers in the code editor. Disable line numbers to create more horizontal editing space for the editor. Back to Top Show Invisibles Show invisible characters such as new lines, return carriage, spaces, and tabs. Used to visually differentiate spaces from tabs. Back to Top Use Soft Tabs Toggles whether to use \"Soft\" Tabs versus real tabs. Soft tabs are spaces instead of real tab character. Turn this off to switch to using real tabs `\\t`. Back to Top Word Wrap Toggles soft line wraps in the code editor. Note: These settings affect both the main editor as well as the diff editor. Back to Top PREVIEW Live Preview Turn on and off live previewing in Tablet mode. Live preview will update the side-by-side preview window whenever there is a code change. Updating of the preview will only happen if the preview window is open and has no performance implications when the preview window is not visible. This feature is not useful for phones. Back to Top TOUCH Tablet Mode Toggles on and off Tablet mode which offers a side by side view of the editor and preview window. This mode is only useful for devices with large screen widths and cannot be turned on for devices with a smaller screen width. Back to Top Haptic Keypress Toggles on and off haptic feedback for the extra keyboard. Haptic feedback is only useful for devices which support this feature. Back to Top Keyboard Position Changes the position of the extra keyboard from Bottom to Top. This feature is useful for iOS devices where the keyboard will hide a portion of the editor including the Extra Keyboard when the virtual keyboard is active. Back to Top Extra Keyboard Toggles on and off the extra Keyboard. The extra keyboard provides shortcuts to code depending on the current editor language or context of the language. For example, the extra keyboard is able to provide JavaScript code suggestions in the context of a `script` tag in an HTML file. Back to Top Touch Keyboard Toggles the Touch keyboard which contain arrow keys and other useful features. Note: These settings are only available on devices with a touch screen. Back to Top ABOUT A section of the settings containing miscellaneous information about the editor. Contains the version information, and a link to report issues with the editor. There is also an option to revoke privacy permissions granted to the app. Warning : Revoking privacy information means removing all projects, files, and other user data that the app stores. Build The build version information of the editor. Back to Top Keyboard Shortcuts Opens up a catalogue of keyboard shortcuts available in the editor. Back to Top Log History Opens up a catalogue of editor actions that are logged. For help in debugging bug reports. Back to Top window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3');","title":"Editor Settings"},{"location":"editor-settings/#editor-settings","text":"The editor settings tab can be used to change various settings of Spck Editor. Searching Settings GIT Appearance Animation Language Theme AMOLED Display Editor Autocomplete/Check Syntax Cursor Style Font Size Font Indent Guide Line Numbers Show Invisibles Indent Guide Use Soft Tabs Word Wrap Preview Live Preview Touch Tablet Mode Haptic Keypress Keyboard Position Extra Keyboard Touch Keyboard About Build Keyboard Shortcuts Log History","title":"Editor Settings"},{"location":"editor-settings/#searching-settings","text":"To search for a setting by name, click on the \ud83d\udd0d Search Icon and type in the setting name. The following section lists out specific settings and their intended behavior. Back to Top","title":"Searching Settings"},{"location":"editor-settings/#git","text":"Credentials : Opens up the GIT Credential modal to change credentials used for different GIT providers (i.e. Github, Gitlab, Bitbucket, Other) This is an example of using a Github app token to connect to your Github repositories. Cloning or pulling public repositories will not require an app token. If an invalid app token is set, you will receive \"Invalid credentials\" error message or \"Authentication Error\" regardless if the repository is public or private. Make sure you grant the token proper access writes, and allow additional settings to push to the Github/Gitlab/Bitbucket branch. (For example, the master branch may be locked and prevent pushing which will also result in an error.) To properly create an access token, please see Creating an Access Token for Spck Editor. Back to Top","title":"GIT"},{"location":"editor-settings/#appearance","text":"","title":"APPEARANCE"},{"location":"editor-settings/#animation","text":"Disables all animations in the editor. For example, opening the menu, or modal animations. This is for phones or devices that experience lag with CSS animations and offers a better experience for older devices. Back to Top","title":"Animation"},{"location":"editor-settings/#language","text":"Use this to change the editor language to a different supported language. Currently supported languages include: English (Recommended) Spanish French Portuguese Russian Indonesian Japanese Chinese Back to Top","title":"Language"},{"location":"editor-settings/#theme","text":"Changes the colors of the code editor. Dark and light editor theme are tied with this setting. Light Themes: Ayu Light Chrome XCode Dark themes: Ayu Mirage Dracula Monokai One Dark Back to Top","title":"Theme"},{"location":"editor-settings/#amoled-display","text":"Use this setting for AMOLED screens to save battery life. Changes all editor blacks to use `#000`. This does not affect menus as a degree of contrast is needed for menus and dialogs/modals and they are not expected to be on screen for a long time. Back to Top","title":"AMOLED Display"},{"location":"editor-settings/#editor","text":"","title":"EDITOR"},{"location":"editor-settings/#autocompletecheck-syntax","text":"Enables advance autocomplete and syntax checking when available for supported languages. Disabling this can help improve performance as autocompletion feature is memory heavy and may have bad performance on older devices. If you are experiencing frequent crashes, it may be due to a memory issue with your phone and it is recommended to try disabling this setting to improve memory usage. Advance Autocompletion Support: JavaScript TypeScript HTML CSS SCSS LESS Basic Autocompletion: Python Java C Ruby Perl Scala More... Back to Top","title":"Autocomplete/Check Syntax"},{"location":"editor-settings/#cursor-style","text":"Change the cursor style of the editor. Can choose from \"No Blink\" or \"Slim\" cursor. Back to Top","title":"Cursor Style"},{"location":"editor-settings/#font-size","text":"Changes the font size of the code editor. Back to Top","title":"Font Size"},{"location":"editor-settings/#font","text":"Changes the font used in the editor. Fonts are downloaded on-demand and can be deleted if they are no longer required. Back to Top","title":"Font"},{"location":"editor-settings/#indent-guide","text":"Changes the visual setting of showing indent guidelines in the editor. Back to Top","title":"Indent Guide"},{"location":"editor-settings/#line-numbers","text":"Toggles the line numbers in the code editor. Disable line numbers to create more horizontal editing space for the editor. Back to Top","title":"Line Numbers"},{"location":"editor-settings/#show-invisibles","text":"Show invisible characters such as new lines, return carriage, spaces, and tabs. Used to visually differentiate spaces from tabs. Back to Top","title":"Show Invisibles"},{"location":"editor-settings/#use-soft-tabs","text":"Toggles whether to use \"Soft\" Tabs versus real tabs. Soft tabs are spaces instead of real tab character. Turn this off to switch to using real tabs `\\t`. Back to Top","title":"Use Soft Tabs"},{"location":"editor-settings/#word-wrap","text":"Toggles soft line wraps in the code editor. Note: These settings affect both the main editor as well as the diff editor. Back to Top","title":"Word Wrap"},{"location":"editor-settings/#preview","text":"","title":"PREVIEW"},{"location":"editor-settings/#live-preview","text":"Turn on and off live previewing in Tablet mode. Live preview will update the side-by-side preview window whenever there is a code change. Updating of the preview will only happen if the preview window is open and has no performance implications when the preview window is not visible. This feature is not useful for phones. Back to Top","title":"Live Preview"},{"location":"editor-settings/#touch","text":"","title":"TOUCH"},{"location":"editor-settings/#tablet-mode","text":"Toggles on and off Tablet mode which offers a side by side view of the editor and preview window. This mode is only useful for devices with large screen widths and cannot be turned on for devices with a smaller screen width. Back to Top","title":"Tablet Mode"},{"location":"editor-settings/#haptic-keypress","text":"Toggles on and off haptic feedback for the extra keyboard. Haptic feedback is only useful for devices which support this feature. Back to Top","title":"Haptic Keypress"},{"location":"editor-settings/#keyboard-position","text":"Changes the position of the extra keyboard from Bottom to Top. This feature is useful for iOS devices where the keyboard will hide a portion of the editor including the Extra Keyboard when the virtual keyboard is active. Back to Top","title":"Keyboard Position"},{"location":"editor-settings/#extra-keyboard","text":"Toggles on and off the extra Keyboard. The extra keyboard provides shortcuts to code depending on the current editor language or context of the language. For example, the extra keyboard is able to provide JavaScript code suggestions in the context of a `script` tag in an HTML file. Back to Top","title":"Extra Keyboard"},{"location":"editor-settings/#touch-keyboard","text":"Toggles the Touch keyboard which contain arrow keys and other useful features. Note: These settings are only available on devices with a touch screen. Back to Top","title":"Touch Keyboard"},{"location":"editor-settings/#about","text":"A section of the settings containing miscellaneous information about the editor. Contains the version information, and a link to report issues with the editor. There is also an option to revoke privacy permissions granted to the app. Warning : Revoking privacy information means removing all projects, files, and other user data that the app stores.","title":"ABOUT"},{"location":"editor-settings/#build","text":"The build version information of the editor. Back to Top","title":"Build"},{"location":"editor-settings/#keyboard-shortcuts","text":"Opens up a catalogue of keyboard shortcuts available in the editor. Back to Top","title":"Keyboard Shortcuts"},{"location":"editor-settings/#log-history","text":"Opens up a catalogue of editor actions that are logged. For help in debugging bug reports. Back to Top window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3');","title":"Log History"},{"location":"embedding/","text":"Embedding Spck Editor One of the features that make Spck Editor unique is the ability to embed the code editor on your very own site. If you have a demo that requires a fully featured, interactive, code editor with a proper virtual file system and previewing support, then look no further. Setup The details of doing this is covered on the Github page. But a quick summary: Download the spck-embed library from npm or bower package manager. Add an iframe to your site linking to https://embed.spck.io . Control the editor using the APIs provided by the library. Use Cases Some use cases planned in the roadmap for this feature are: Editor tools: like HTML cleaners, converters, validators, previewers for new languages. (Vue file support maybe?). Teaching, create code demos that can be interacted with. Step-by-step tutorials using a live editor. These are just some examples of possible uses, although additional features may be required to fulfill them. Issues Please raise an issue on the Github page if you have an issue, request or suggestion with the embedded code editor. Demo Below are some sites already using the embedded code editor: Indent.js Angular-Query-Builder If you have a project using the embedded code editor, we'd love to hear about it. Leave us a note by email, or through Github if you want to include it on this page. window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3');","title":"Embedding Spck Editor"},{"location":"embedding/#embedding-spck-editor","text":"One of the features that make Spck Editor unique is the ability to embed the code editor on your very own site. If you have a demo that requires a fully featured, interactive, code editor with a proper virtual file system and previewing support, then look no further.","title":"Embedding Spck Editor"},{"location":"embedding/#setup","text":"The details of doing this is covered on the Github page. But a quick summary: Download the spck-embed library from npm or bower package manager. Add an iframe to your site linking to https://embed.spck.io . Control the editor using the APIs provided by the library.","title":"Setup"},{"location":"embedding/#use-cases","text":"Some use cases planned in the roadmap for this feature are: Editor tools: like HTML cleaners, converters, validators, previewers for new languages. (Vue file support maybe?). Teaching, create code demos that can be interacted with. Step-by-step tutorials using a live editor. These are just some examples of possible uses, although additional features may be required to fulfill them.","title":"Use Cases"},{"location":"embedding/#issues","text":"Please raise an issue on the Github page if you have an issue, request or suggestion with the embedded code editor.","title":"Issues"},{"location":"embedding/#demo","text":"Below are some sites already using the embedded code editor: Indent.js Angular-Query-Builder If you have a project using the embedded code editor, we'd love to hear about it. Leave us a note by email, or through Github if you want to include it on this page. window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3');","title":"Demo"},{"location":"getting-started/","text":"Getting Started The Basics Creating Your First Project Create a new Project from Templates Cloning a Git Repo Import a ZIP file Creating a Lab from Templates Adding Files File Folder Upload Files Previewing Preview Markdown Preview HTML Preview HTML in Tablet Mode Resize Preview Window Setting Default File Advanced Topics Files Cut/Paste Files Moving File Duplicate File Editing Arrow Keys Extra Keyboard Emmet Key Copy/Paste Go to Next Error Autoformat/Reformat Code Viewing Syntax Errors Diff Editing Toggle Code Folding Reverting Edits Mobile App Links Creating Your First Project There are a few ways to create a new project in Spck Editor. These include: * Create a new Project from Templates * Cloning a Git Repo * Import a ZIP file * Creating a Lab from Templates Create New Project To create a new project from a list of predefined templates, go to the Projects tab menu, click the + Icon and select New Project . List of frameworks currently available: JavaScript Angular AngularJS React D3 Vue CSS Bootstrap Bulma Material Design Lite Semantic UI UIkit Back to Top Cloning a Git Repo From the Projects tab menu, click on the GIT icon and select Clone Repo . This will bring up the GIT clone modal. Enter in a GIT repo HTTPS URL and click OK to begin cloning. For more information on GIT cloning, please visit the GIT Guide Back to Top Import a ZIP file Simple ZIP files can be imported into Spck Editor. ZIP Archives offer a way to archive and export/import projects that does not rely on GIT. Archives offer a simple way to share small projects. To import a ZIP archive, follow the steps below: Open the Projects menu tab, click on the + icon and select Import ZIP . This should open up a system dialog to select a ZIP file depending on what system you are using. Select a ZIP file to import. Note: ZIP files do not store file encodings in the archive, it is assume that the file encoding is UTF-8, which might not be the case if the ZIP file was generated on an older Windows computer or using external tools. There is no way for the editor to detect what encoding the ZIP file is using, so other encodings may result in data corruption or an import error. The import process should begin, and a new project name prompt will show before the project is imported. Enter a project name for the ZIP file. Back to Top Creating a Lab Labs offer a neat way to learn from other projects created by other devs and programmers. There are labs using D3, Three.js that range from simple games to machine learning demos. To create a lab, follow the steps below. Open the Projects menu tab, click the + icon, and select View Labs . This will bring you to the Labs gallery page where you can choose from all of the labs available. Click on any lab to create a project that duplicates the code as a local project. Back to Top Adding Files File To create a new file you need to have created and open a project first. To add a file to the project, follow the steps below. Open the File tab menu, click the + icon and select New File . Enter a file name or file path into the prompt and press \" OK \". File paths use '/' as the path separator. Back to Top Folder To create a new folder you need to have created a and opened a project first. To add a folder to the project, follow the steps below. Open the File tab menu, click the + icon and select New Folder . b. Alternatively, you can right click the folder you want to create folder under. This will open up the following menu: Enter a folder name or folder path into the prompt and press \" OK \". If the folder path's directory does not exist, then the directory will be created automatically. Back to Top Upload Files You can choose existing files on your device to upload to your project. To upload a file you need to have created a and opened a project first. Open the File tab menu, click the + icon and select Upload File . b. Alternatively, you can right click the folder you want to upload under. This will open up the following menu: Select the file that you want to upload. After selecting, the file should appear under the folder you selected or under the project root folder. Back to Top Previewing The editor allows for previewing of HTML pages and Markdown files. Additional file types and languages are planned to be supported in the future. Preview Markdown Previewing markdown .md files can be done following the steps below. Click on the Menu icon next to the file and select Preview option. Preview of the Markdown file, shown in the editor view. Back to Top Preview HTML Previewing HTML .html is the default when you click the Play \u25b7 button. By default, the project will preview the current HTML file (one being edited) before looking for any index.html in the project root. The priority of the HTML file to preview is as follows: Current Editing HTML File Default HTML File (See Setting Default Launch File ) Any .html in the project root Any .html in subdirectories To preview HTML files on mobile, click the Play \u25b7 button in the main view: Preview HTML in Tablet Mode In Tablet Mode (only for Tablets or wide-screen devices), a second preview option is available. This option does not launch a separate window for the preview, but instead offer a side-by-side preview next to the editor. Follow the steps below to launch side-by-side Preview. Turn on Tablet Mode (if available) in the Settings menu tab. See Tablet Mode for more details. There should now be a Side Preview icon next to the default Play icon. Click on the new icon to launch Side Preview. The preview should open to the right. The size of the preview window can be adjusted by dragging the resize bar between the editor and the preview area. Resize Preview Window The size of the Preview window can be adjusted when in Tablet mode and using the side preview window. To adjust the preview window size, use the bar between the Editor and the Preview window. Back to Top Setting Default Launch File The default HTML file to preview upon clicking the Play \u25b7 button can be changed. To change the default file to preview, right-click any HTML file and select the Launch Default option. The default launch file will be marked by a green Play icon. The default launch file will not have priority above any currently editing HTML file. Please see Preview HTML for the priority of preview files. Back to Top Files These are more advanced features that will be covered for Spck Editor. For the basics, please visit the section above on Creating a Project, Adding Files, and Previewing. Cut/Paste Files If you need to move files between folders within a project, then use the Cut & Paste feature. To Cut & Paste a file or folder, follow the steps below. Back to Top Moving File To move files or folders within a project, you can use the Cut/Paste method described above. To move files outside of the project to another project, you can use the \" Copy to... \" feature and then deleting of the file after successfully copying. Duplicate File You can also duplicate files using the technique described above in Moving File . Simply use the Copy to feature on the same project to create a duplicate of the file or folder. Back to Top Editing There are various editing features that are not covered in this section that can be found in the Editor Settings page. For example, switching to using real Tab characters or showing invisibles can be managed through the Editor settings. This section covers some basics as well as some useful, but perhaps hard to find features of the editor such as Code Formatting, and jumping to the Next Error. Arrow Keys The arrow keys offer the useful way to navigate code. The arrow keys are part of the Touch keyboard that is available on mobile devices. On iOS the Touch keyboard placement is at the top of the screen to prevent being covered by the software keyboard. The arrow keys also provide useful navigation function when using autocomplete. Simply use the the Up and Down arrows to change Autocomplete selection and use the Tab key to complete it. Back to Top Extra Keyboard The extra keyboard provides additional keys that may not be readily available on your mobile keyboard. This helps reduce the about of keyboard switching needed to code. There are different key configurations for HTML, CSS, JS and the keys shown will depend upon the file extension as well as the context. Below is an example showing how the extra keyboard switches between HTML, JS, CSS mode depending on the HTML tag. The extra keyboard also provides a color selector when in CSS mode as well as an Emmet key when in HTML or in CSS modes. See Emmet Key for more details on Emmet. Back to Top Emmet Key Emmet is a shorthand syntax to reduce typing when editing HTML or CSS files. Emmet tries to emulate CSS selector syntax, a brief guide on Emmet can be found here https://docs.emmet.io/cheat-sheet/ . Back to Top Copy/Paste Copy and Pasting can be done in 2 ways. One way is to use the Touch Keyboard extra section. Click on the >> Key on the Touch Keyboard to access additional keys for Copy & Paste. To select text, use a long press to begin selection. You can use the cursor keys provided with the selection to adjust the selection. An action bar will appear with keys to Cut and Paste. Back to Top Go to Next Error From the extra section of the Touch keyboard (To access click on the >> Key) there is the useful feature to jump to the next syntax error in the file. To use this feature follow the steps below. From the Touch Keyboard, click the + key to expand additional features. Click Next Error to jump to the next syntax error that the editor finds. Back to Top Autoformat/Reformat Code The extra menu in the Touch keyboard also provides the option to reformat the code using jsbeautify. This reformatting works for all HTML, CSS, JS files. See the example below on using this feature. Back to Top Viewing Syntax Errors Within the line number gutter, there will be icons to show syntax errors, warnings, or bad practices. To access the information reported by the syntax validation feature, click on the icon to see the message. Please note that both the Autocomplete/Check Syntax and Line Number settings must be enabled to use this feature. See Editor Settings for more details. Back to Top Diff Editing The diff editor is only available to projects using a GIT backed repository. For information on how to create a GIT repository, please visit the GIT Guide page. Back to Top Toggle Code Folding When using the diff editor, parts of the code that are not changed will not be highlighted. For long sections of the code that are not changed and are not important for the purpose of comparing changes, they are hidden (folded) by default. To see the lines of code hidden, click on the \"Toggle Fold\" text above certain lines to expand and collapse the hidden code. Back to Top Reverting Edits The diff editor can also be used to revert individual edits (line-by-line reverting). This is a useful feature to get rid of edits that caused some sort of error, or to undo any mistakes in the editing. To use this feature, click on the \"Revert\" text above changed lines to revert it back to the original. You can use the Undo/Redo buttons located at the bottom of the diff editor to undo/redo any reverts done on the file. Back to Top window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3');","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#the-basics","text":"Creating Your First Project Create a new Project from Templates Cloning a Git Repo Import a ZIP file Creating a Lab from Templates Adding Files File Folder Upload Files Previewing Preview Markdown Preview HTML Preview HTML in Tablet Mode Resize Preview Window Setting Default File","title":"The Basics"},{"location":"getting-started/#advanced-topics","text":"Files Cut/Paste Files Moving File Duplicate File Editing Arrow Keys Extra Keyboard Emmet Key Copy/Paste Go to Next Error Autoformat/Reformat Code Viewing Syntax Errors Diff Editing Toggle Code Folding Reverting Edits","title":"Advanced Topics"},{"location":"getting-started/#mobile-app-links","text":"","title":"Mobile App Links"},{"location":"getting-started/#creating-your-first-project","text":"There are a few ways to create a new project in Spck Editor. These include: * Create a new Project from Templates * Cloning a Git Repo * Import a ZIP file * Creating a Lab from Templates","title":"Creating Your First Project"},{"location":"getting-started/#create-new-project","text":"To create a new project from a list of predefined templates, go to the Projects tab menu, click the + Icon and select New Project . List of frameworks currently available: JavaScript Angular AngularJS React D3 Vue CSS Bootstrap Bulma Material Design Lite Semantic UI UIkit Back to Top","title":"Create New Project"},{"location":"getting-started/#cloning-a-git-repo","text":"From the Projects tab menu, click on the GIT icon and select Clone Repo . This will bring up the GIT clone modal. Enter in a GIT repo HTTPS URL and click OK to begin cloning. For more information on GIT cloning, please visit the GIT Guide Back to Top","title":"Cloning a Git Repo"},{"location":"getting-started/#import-a-zip-file","text":"Simple ZIP files can be imported into Spck Editor. ZIP Archives offer a way to archive and export/import projects that does not rely on GIT. Archives offer a simple way to share small projects. To import a ZIP archive, follow the steps below: Open the Projects menu tab, click on the + icon and select Import ZIP . This should open up a system dialog to select a ZIP file depending on what system you are using. Select a ZIP file to import. Note: ZIP files do not store file encodings in the archive, it is assume that the file encoding is UTF-8, which might not be the case if the ZIP file was generated on an older Windows computer or using external tools. There is no way for the editor to detect what encoding the ZIP file is using, so other encodings may result in data corruption or an import error. The import process should begin, and a new project name prompt will show before the project is imported. Enter a project name for the ZIP file. Back to Top","title":"Import a ZIP file"},{"location":"getting-started/#creating-a-lab","text":"Labs offer a neat way to learn from other projects created by other devs and programmers. There are labs using D3, Three.js that range from simple games to machine learning demos. To create a lab, follow the steps below. Open the Projects menu tab, click the + icon, and select View Labs . This will bring you to the Labs gallery page where you can choose from all of the labs available. Click on any lab to create a project that duplicates the code as a local project. Back to Top","title":"Creating a Lab"},{"location":"getting-started/#adding-files","text":"","title":"Adding Files"},{"location":"getting-started/#file","text":"To create a new file you need to have created and open a project first. To add a file to the project, follow the steps below. Open the File tab menu, click the + icon and select New File . Enter a file name or file path into the prompt and press \" OK \". File paths use '/' as the path separator. Back to Top","title":"File"},{"location":"getting-started/#folder","text":"To create a new folder you need to have created a and opened a project first. To add a folder to the project, follow the steps below. Open the File tab menu, click the + icon and select New Folder . b. Alternatively, you can right click the folder you want to create folder under. This will open up the following menu: Enter a folder name or folder path into the prompt and press \" OK \". If the folder path's directory does not exist, then the directory will be created automatically. Back to Top","title":"Folder"},{"location":"getting-started/#upload-files","text":"You can choose existing files on your device to upload to your project. To upload a file you need to have created a and opened a project first. Open the File tab menu, click the + icon and select Upload File . b. Alternatively, you can right click the folder you want to upload under. This will open up the following menu: Select the file that you want to upload. After selecting, the file should appear under the folder you selected or under the project root folder. Back to Top","title":"Upload Files"},{"location":"getting-started/#previewing","text":"The editor allows for previewing of HTML pages and Markdown files. Additional file types and languages are planned to be supported in the future.","title":"Previewing"},{"location":"getting-started/#preview-markdown","text":"Previewing markdown .md files can be done following the steps below. Click on the Menu icon next to the file and select Preview option. Preview of the Markdown file, shown in the editor view. Back to Top","title":"Preview Markdown"},{"location":"getting-started/#preview-html","text":"Previewing HTML .html is the default when you click the Play \u25b7 button. By default, the project will preview the current HTML file (one being edited) before looking for any index.html in the project root. The priority of the HTML file to preview is as follows: Current Editing HTML File Default HTML File (See Setting Default Launch File ) Any .html in the project root Any .html in subdirectories To preview HTML files on mobile, click the Play \u25b7 button in the main view:","title":"Preview HTML"},{"location":"getting-started/#preview-html-in-tablet-mode","text":"In Tablet Mode (only for Tablets or wide-screen devices), a second preview option is available. This option does not launch a separate window for the preview, but instead offer a side-by-side preview next to the editor. Follow the steps below to launch side-by-side Preview. Turn on Tablet Mode (if available) in the Settings menu tab. See Tablet Mode for more details. There should now be a Side Preview icon next to the default Play icon. Click on the new icon to launch Side Preview. The preview should open to the right. The size of the preview window can be adjusted by dragging the resize bar between the editor and the preview area.","title":"Preview HTML in Tablet Mode"},{"location":"getting-started/#resize-preview-window","text":"The size of the Preview window can be adjusted when in Tablet mode and using the side preview window. To adjust the preview window size, use the bar between the Editor and the Preview window. Back to Top","title":"Resize Preview Window"},{"location":"getting-started/#setting-default-launch-file","text":"The default HTML file to preview upon clicking the Play \u25b7 button can be changed. To change the default file to preview, right-click any HTML file and select the Launch Default option. The default launch file will be marked by a green Play icon. The default launch file will not have priority above any currently editing HTML file. Please see Preview HTML for the priority of preview files. Back to Top","title":"Setting Default Launch File"},{"location":"getting-started/#files","text":"These are more advanced features that will be covered for Spck Editor. For the basics, please visit the section above on Creating a Project, Adding Files, and Previewing.","title":"Files"},{"location":"getting-started/#cutpaste-files","text":"If you need to move files between folders within a project, then use the Cut & Paste feature. To Cut & Paste a file or folder, follow the steps below. Back to Top","title":"Cut/Paste Files"},{"location":"getting-started/#moving-file","text":"To move files or folders within a project, you can use the Cut/Paste method described above. To move files outside of the project to another project, you can use the \" Copy to... \" feature and then deleting of the file after successfully copying.","title":"Moving File"},{"location":"getting-started/#duplicate-file","text":"You can also duplicate files using the technique described above in Moving File . Simply use the Copy to feature on the same project to create a duplicate of the file or folder. Back to Top","title":"Duplicate File"},{"location":"getting-started/#editing","text":"There are various editing features that are not covered in this section that can be found in the Editor Settings page. For example, switching to using real Tab characters or showing invisibles can be managed through the Editor settings. This section covers some basics as well as some useful, but perhaps hard to find features of the editor such as Code Formatting, and jumping to the Next Error.","title":"Editing"},{"location":"getting-started/#arrow-keys","text":"The arrow keys offer the useful way to navigate code. The arrow keys are part of the Touch keyboard that is available on mobile devices. On iOS the Touch keyboard placement is at the top of the screen to prevent being covered by the software keyboard. The arrow keys also provide useful navigation function when using autocomplete. Simply use the the Up and Down arrows to change Autocomplete selection and use the Tab key to complete it. Back to Top","title":"Arrow Keys"},{"location":"getting-started/#extra-keyboard","text":"The extra keyboard provides additional keys that may not be readily available on your mobile keyboard. This helps reduce the about of keyboard switching needed to code. There are different key configurations for HTML, CSS, JS and the keys shown will depend upon the file extension as well as the context. Below is an example showing how the extra keyboard switches between HTML, JS, CSS mode depending on the HTML tag. The extra keyboard also provides a color selector when in CSS mode as well as an Emmet key when in HTML or in CSS modes. See Emmet Key for more details on Emmet. Back to Top","title":"Extra Keyboard"},{"location":"getting-started/#emmet-key","text":"Emmet is a shorthand syntax to reduce typing when editing HTML or CSS files. Emmet tries to emulate CSS selector syntax, a brief guide on Emmet can be found here https://docs.emmet.io/cheat-sheet/ . Back to Top","title":"Emmet Key"},{"location":"getting-started/#copypaste","text":"Copy and Pasting can be done in 2 ways. One way is to use the Touch Keyboard extra section. Click on the >> Key on the Touch Keyboard to access additional keys for Copy & Paste. To select text, use a long press to begin selection. You can use the cursor keys provided with the selection to adjust the selection. An action bar will appear with keys to Cut and Paste. Back to Top","title":"Copy/Paste"},{"location":"getting-started/#go-to-next-error","text":"From the extra section of the Touch keyboard (To access click on the >> Key) there is the useful feature to jump to the next syntax error in the file. To use this feature follow the steps below. From the Touch Keyboard, click the + key to expand additional features. Click Next Error to jump to the next syntax error that the editor finds. Back to Top","title":"Go to Next Error"},{"location":"getting-started/#autoformatreformat-code","text":"The extra menu in the Touch keyboard also provides the option to reformat the code using jsbeautify. This reformatting works for all HTML, CSS, JS files. See the example below on using this feature. Back to Top","title":"Autoformat/Reformat Code"},{"location":"getting-started/#viewing-syntax-errors","text":"Within the line number gutter, there will be icons to show syntax errors, warnings, or bad practices. To access the information reported by the syntax validation feature, click on the icon to see the message. Please note that both the Autocomplete/Check Syntax and Line Number settings must be enabled to use this feature. See Editor Settings for more details. Back to Top","title":"Viewing Syntax Errors"},{"location":"getting-started/#diff-editing","text":"The diff editor is only available to projects using a GIT backed repository. For information on how to create a GIT repository, please visit the GIT Guide page. Back to Top","title":"Diff Editing"},{"location":"getting-started/#toggle-code-folding","text":"When using the diff editor, parts of the code that are not changed will not be highlighted. For long sections of the code that are not changed and are not important for the purpose of comparing changes, they are hidden (folded) by default. To see the lines of code hidden, click on the \"Toggle Fold\" text above certain lines to expand and collapse the hidden code. Back to Top","title":"Toggle Code Folding"},{"location":"getting-started/#reverting-edits","text":"The diff editor can also be used to revert individual edits (line-by-line reverting). This is a useful feature to get rid of edits that caused some sort of error, or to undo any mistakes in the editing. To use this feature, click on the \"Revert\" text above changed lines to revert it back to the original. You can use the Undo/Redo buttons located at the bottom of the diff editor to undo/redo any reverts done on the file. Back to Top window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3');","title":"Reverting Edits"},{"location":"git-guide/","text":"GIT Guide GIT is one of the main ways of exporting projects from the editor. GIT support is available for popular GIT hosting (i.e. Github, Gitlab, Bitbucket). Cloning a Repo Init a Repo Locally Connecting a Local Repo to a Remote Pushing Repo to Remote Check Out Branch Creating a Branch Switching Branches Pushing a Local Branch to Remote Deleting a Branch Merge Conflicts Viewing Diffs Cloning a Repo Public Repo Cloning a public repo does not require any credentials. Open the Clone Repo dialog. Click the \u2442 button on the Projects tab. Enter the Repo URL (i.e. https://github.com/arturkot/the-house-game.git ) Shallow : Toggle between a deep clone and a shallow clone. A deep clone will clone the entire repository history. A shallow clone will only clone the HEAD commit. Click OK and the cloning should begin. You can access your cloned project from the Project menu tab. Private Repo To clone a private repo, you need to set up GIT credentials first. See Creating an App Token page for more details. Back to Top Local Repo Turn a local project (no remote repo in Github, Gitlab, etc.) for keeping track of history and gain access to git features like diffing, reverting, commiting, etc. Create a project. See Creating a Project for more details. Click the + Icon to initialize a local repository. Back to Top Connecting a Local Repo to a Remote To connect a local repostiory to a remote one (BitBucket/Gitlab/Github), follow the steps below. Connecting to a remote repository allows backing up and sharing your work with others that have access to that repository. Create a new repository with a remote provider (i.e. Github ) If you already have an empty repository created, then skip this step. Example with Github a. Go to Create Repo ) page. Enter a repository name. b. Select if the repo will be public or private. For private repo you would need to create an app token to access it. See Creating an App Token for more details. c. DO NOT initialize the repository with a README as this will create a first commit that will be different from your local repository. The repo must be empty to not have any conflicts with the local one. Click Create repository button. d. Save the HTTPS remote repository URL for your remote. You will need this later. Create an initial commit for your repo. If your local repo already has commits, then skip this step. Create your Remote in your project that links to your Remote Repo URL created in step 1. You can now push your commits to your remote repository. See the next section for details on how to do this. Back to Top Pushing Repo to Remote If you want to sync your commits to your remote repository, you can do so pushing the Push feature. To push commits to your remote, follow the steps below: You need to have created an app token to push. You must be the owner of the public repo to push to public repos. To create an app token please see Creating an App Token page. Open the GIT menu on the Files menu tab, and Click Push to push any unpushed commits. Authentication Error If you get an authentication error message the token that you created is not valid for the repo that you are pushing to. Check that the provider is set correctly for the token, and that your token has the proper repository access permissions. See Creating an App Token page for more details. Back to Top Check Out Branch Branches are a great way to keep separate versions of your code base separate. To checkout a different branch, access the checkout option from the GIT menu. Back to Top Creating a Branch You can use the + Button in the Branches modal to create a new branch. See the following example below on creating a local branch. Back to Top Switching Branches To switch branches, follow the steps below: Open Branches modal to see a list of branches. Click the Checkout button to checkout either a Local or Remote branch. Back to Top Pushing a Local Branch to Remote Create a local branch. See instructions in Creating a Branch . Checkout the local branch. Set up a remote to push to. See instructions in Connecting a Local Repo to a Remote . Push the local branch to the remote. See instructions in Pushing Repo to Remote . Back to Top Deleting a Branch You can delete local branches but not remote branches. Remote branch deleting will be supported in the future. To delete a branch click on the \"Trash\" icon in Branches modal. You cannot delete the current active branch, so be sure to switch to another branch to before deleting the current branch. Back to Top Merge Conflicts Sometimes a file have a discrepancy with the remote repository, and the history cannot differentiate which one is newer. As a result, the file is marked as having a \"Merge Conflict\". These files will be marked in purple . Projects with merge conflicts cannot push commits to the remote repository until all merge conflicts are resolved. Currently the only way to resolve merge conflicts is to manually mark them as resolved by right-clicking on the file and selecting the \" Mark Resolved \" option. Back to Top File Diffs Sometimes you need to see changes between your local repository and the remote repository; this is when a diff viewer is needed. Spck Editor has a built-in diff viewer for files that have changed from the remote repo. Back to Top Viewing Diffs To view changes that have occurred, select a file marked in yellow or blue depending on if the editor is in \"dark\" or \"light\" mode. You can open the diff by clicking on the filename in the Source Control section of the file menu tab. You can also open the diff by from the Options menu in the Files section and selecting the View Diff option. Back to Top window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3'); table { width:100%; }","title":"GIT Guide"},{"location":"git-guide/#git-guide","text":"GIT is one of the main ways of exporting projects from the editor. GIT support is available for popular GIT hosting (i.e. Github, Gitlab, Bitbucket). Cloning a Repo Init a Repo Locally Connecting a Local Repo to a Remote Pushing Repo to Remote Check Out Branch Creating a Branch Switching Branches Pushing a Local Branch to Remote Deleting a Branch Merge Conflicts Viewing Diffs","title":"GIT Guide"},{"location":"git-guide/#cloning-a-repo","text":"","title":"Cloning a Repo"},{"location":"git-guide/#public-repo","text":"Cloning a public repo does not require any credentials. Open the Clone Repo dialog. Click the \u2442 button on the Projects tab. Enter the Repo URL (i.e. https://github.com/arturkot/the-house-game.git ) Shallow : Toggle between a deep clone and a shallow clone. A deep clone will clone the entire repository history. A shallow clone will only clone the HEAD commit. Click OK and the cloning should begin. You can access your cloned project from the Project menu tab.","title":"Public Repo"},{"location":"git-guide/#private-repo","text":"To clone a private repo, you need to set up GIT credentials first. See Creating an App Token page for more details. Back to Top","title":"Private Repo"},{"location":"git-guide/#local-repo","text":"Turn a local project (no remote repo in Github, Gitlab, etc.) for keeping track of history and gain access to git features like diffing, reverting, commiting, etc. Create a project. See Creating a Project for more details. Click the + Icon to initialize a local repository. Back to Top","title":"Local Repo"},{"location":"git-guide/#connecting-a-local-repo-to-a-remote","text":"To connect a local repostiory to a remote one (BitBucket/Gitlab/Github), follow the steps below. Connecting to a remote repository allows backing up and sharing your work with others that have access to that repository. Create a new repository with a remote provider (i.e. Github ) If you already have an empty repository created, then skip this step.","title":"Connecting a Local Repo to a Remote"},{"location":"git-guide/#example-with-github","text":"a. Go to Create Repo ) page. Enter a repository name. b. Select if the repo will be public or private. For private repo you would need to create an app token to access it. See Creating an App Token for more details. c. DO NOT initialize the repository with a README as this will create a first commit that will be different from your local repository. The repo must be empty to not have any conflicts with the local one. Click Create repository button. d. Save the HTTPS remote repository URL for your remote. You will need this later. Create an initial commit for your repo. If your local repo already has commits, then skip this step. Create your Remote in your project that links to your Remote Repo URL created in step 1. You can now push your commits to your remote repository. See the next section for details on how to do this. Back to Top","title":"Example with Github"},{"location":"git-guide/#pushing-repo-to-remote","text":"If you want to sync your commits to your remote repository, you can do so pushing the Push feature. To push commits to your remote, follow the steps below: You need to have created an app token to push. You must be the owner of the public repo to push to public repos. To create an app token please see Creating an App Token page. Open the GIT menu on the Files menu tab, and Click Push to push any unpushed commits.","title":"Pushing Repo to Remote"},{"location":"git-guide/#authentication-error","text":"If you get an authentication error message the token that you created is not valid for the repo that you are pushing to. Check that the provider is set correctly for the token, and that your token has the proper repository access permissions. See Creating an App Token page for more details. Back to Top","title":"Authentication Error"},{"location":"git-guide/#check-out-branch","text":"Branches are a great way to keep separate versions of your code base separate. To checkout a different branch, access the checkout option from the GIT menu. Back to Top","title":"Check Out Branch"},{"location":"git-guide/#creating-a-branch","text":"You can use the + Button in the Branches modal to create a new branch. See the following example below on creating a local branch. Back to Top","title":"Creating a Branch"},{"location":"git-guide/#switching-branches","text":"To switch branches, follow the steps below: Open Branches modal to see a list of branches. Click the Checkout button to checkout either a Local or Remote branch. Back to Top","title":"Switching Branches"},{"location":"git-guide/#pushing-a-local-branch-to-remote","text":"Create a local branch. See instructions in Creating a Branch . Checkout the local branch. Set up a remote to push to. See instructions in Connecting a Local Repo to a Remote . Push the local branch to the remote. See instructions in Pushing Repo to Remote . Back to Top","title":"Pushing a Local Branch to Remote"},{"location":"git-guide/#deleting-a-branch","text":"You can delete local branches but not remote branches. Remote branch deleting will be supported in the future. To delete a branch click on the \"Trash\" icon in Branches modal. You cannot delete the current active branch, so be sure to switch to another branch to before deleting the current branch. Back to Top","title":"Deleting a Branch"},{"location":"git-guide/#merge-conflicts","text":"Sometimes a file have a discrepancy with the remote repository, and the history cannot differentiate which one is newer. As a result, the file is marked as having a \"Merge Conflict\". These files will be marked in purple . Projects with merge conflicts cannot push commits to the remote repository until all merge conflicts are resolved. Currently the only way to resolve merge conflicts is to manually mark them as resolved by right-clicking on the file and selecting the \" Mark Resolved \" option. Back to Top","title":"Merge Conflicts"},{"location":"git-guide/#file-diffs","text":"Sometimes you need to see changes between your local repository and the remote repository; this is when a diff viewer is needed. Spck Editor has a built-in diff viewer for files that have changed from the remote repo. Back to Top","title":"File Diffs"},{"location":"git-guide/#viewing-diffs","text":"To view changes that have occurred, select a file marked in yellow or blue depending on if the editor is in \"dark\" or \"light\" mode. You can open the diff by clicking on the filename in the Source Control section of the file menu tab. You can also open the diff by from the Options menu in the Files section and selecting the View Diff option. Back to Top window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3'); table { width:100%; }","title":"Viewing Diffs"},{"location":"importing-exporting/","text":"Importing & Exporting Currently, the only way to import an existing project is through Github or a local zip file. However, integration with additional Git providers and third-party providers, such as Gitlab and Dropbox are on the roadmap. For now, exporting and importing zip files offer a convenient means of transfering your projects around without having to use Github. Import Zip Archive To import a zip file with your project contained within, select the option \" Import Zip File \" from the menu in the \"Projects\" tab. In the prompt that appears, enter a new project name for the imported zip archive. After clicking \" OK \" to continue, the imported files should appear in your new project. Export Zip Archive To export your project select the \" Export Zip \" option from either the menu in the \"Files\" or \"Projects\" tab. After doing so, enter the name of the zip file that will be saved to your default \"Downloads\" location. After clicking \" OK \", the download for your zip file should begin. window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3');","title":"Importing & Exporting"},{"location":"importing-exporting/#importing-exporting","text":"Currently, the only way to import an existing project is through Github or a local zip file. However, integration with additional Git providers and third-party providers, such as Gitlab and Dropbox are on the roadmap. For now, exporting and importing zip files offer a convenient means of transfering your projects around without having to use Github.","title":"Importing &amp; Exporting"},{"location":"importing-exporting/#import-zip-archive","text":"To import a zip file with your project contained within, select the option \" Import Zip File \" from the menu in the \"Projects\" tab. In the prompt that appears, enter a new project name for the imported zip archive. After clicking \" OK \" to continue, the imported files should appear in your new project.","title":"Import Zip Archive"},{"location":"importing-exporting/#export-zip-archive","text":"To export your project select the \" Export Zip \" option from either the menu in the \"Files\" or \"Projects\" tab. After doing so, enter the name of the zip file that will be saved to your default \"Downloads\" location. After clicking \" OK \", the download for your zip file should begin. window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-124804584-3');","title":"Export Zip Archive"}]}